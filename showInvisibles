#!/usr/bin/perl -w
#
# showInvisibles: make control and whitespace chars visible.
# 2007-01-16: Written by Steven J. DeRose.
#
use strict;
use Getopt::Long;
use HTML::Entities;

use sjdUtils;
use alogging;

our %metadata = (
    'title'        => "showInvisibles",
    'description'  => "Make control and whitespace chars visible.",
    'rightsHolder' => "Steven J. DeRose",
    'creator'      => "http://viaf.org/viaf/50334488",
    'type'         => "http://purl.org/dc/dcmitype/Software",
    'language'     => "Perl 5.18",
    'created'      => "2007-01-16",
    'modified'     => "2021-04-07",
    'publisher'    => "http://github.com/sderose",
    'license'      => "https://creativecommons.org/licenses/by-sa/3.0/"
);
our $VERSION_DATE = $metadata{'modified'};


=pod

=head1 Usage

showinvisible [options]

Make control and non-ASCII characters visible.

Do this by using the Unicode "control symbols" where applicable,
and backslash-codes (or XML numeric character references) elsewhere.

By default, literal spaces I<are not> replaced (but see I<-s> and I<--spaceAs>.

Useful for visualizing return/linefeed, space/tab, etc. Can also be used
to escape undesired characters in a file to ease later processing.

By default, Unicode characters are converted to UTF-8, then the UTF-8 bytes
are coded as \xNN. Set I<--oformat> to convert them to other forms.

=head1 Options

=over

=item * B<--color>

Colorize non-ASCII characters in the output.
Not the default, even if environment variable C<USE_COLOR> is set.
See also I<--whichColor>.

=item * B<---iencoding> I<e>

Assume the input character encoding is I<e>.
The output encoding is always UTF-8.

=item * B<--oformat> [x]

Choose a different way to represent the invisible characters.
Taking BULLET (U+2022) as an example:
  UPLUS: U+02022
  UTF:   \xe2\x80\xa2
  URI:   %e2%80%a2
  DENT:  &#8226;
  XENT:  &#x2022;
  NENT:  &bull;  ("N" for named, per HTML 4. If unavailble, uses XENT)
  PY4:   \u2022
  PY8:   \U00002022
  PYBR:  \x{2022}

=item * B<--pics>

Show Unicode control pictures instead of entities, for
control characters and spaces (default). I<--no-pics> to turn off.

=item * B<--quiet> OR B<-q>

Suppress most messages.

=item * B<-s>

Leave actual spaces (d32) alone. Useful for avoiding excessive clutter, while
still letting you see where other whitespace characters (such as TAB) were.
This also affects whether actual spaces are counted in the total number
of control characters or not.

=item * B<--spaceAs> I<s>

Display spaces as:
  I<OK> show as literal space (default)
  I<B> ('b' with a slash through it, U+2422 -- the default)
  I<U> (an underscore with the ends turned up, U+2423)
  I<SP> (a little "SP", U+2420)
  I<NBSP> (a non-breaking space, U+00A0)
  I<COLOR> (experimental, different colors for different whitespace chars)

=item * B<--lfAs> I<l>

(not yet implemented) Display newline/linefeed as:
  I<LF> (a little "LF", U+2424) (default)
  I<OK> show as literal newline
  I<NL> (a little "NL", U+2440 -- the default)

=item * B<--uri>

Superceded by I<--oFormat URI>.

Show URI-style C<%xx> escapes for control chars.
However, not yet smart enough to convert high Unicode characters to
UTF-8 and then URI-escape that UTF-8.

=item * B<--verbose> OR B<-v>

Add more detailed messages (doesn't do much at the moment).

=item * B<--version>

Display version info and exit.

=item * B<--whichColor> I<name>

Choose the color to use with I<--color>. See C<colorManager.pm> and
F<colorNames.md> for details and
a list of the names. Generally, the form is C<[fg]/[bg]/[effect]>.

=back


=head1 Related Commands

C<sjdUtils.pm> provides functions to do the transformations.

C<colorManager.pm> provides ANSI terminal color support.


=head1 Known bugs and limitations

For UTF-8, shows \xFF-style escapes for each byte, not \UFFFF or \x{FFFF}
for the code point as a whole.


=head1 History

  2007-01-16: Written by Steven J. DeRose.
  2007-12-31 sjd: Getopt, version, etc.
  2010-09-27 sjd: Cleanup, --base, --pad, --color, factor out makeCharRef().
  2011-01-24 sjd: Add control pictures and alternates. binmode STDOUT.
  2012-01-23 sjd: Fix --color and --base. Use sjdUtils.
Optimize color-escaping instead of doing on/off for every char.
  2012-02-24 sjd: Count and report C1, >65535, whitespace.
  2012-10-23 sjd: Simplify. Ditch counting, -base, -names, -pad. Use sjdUtils.
  2013-06-21: Add --color, --whichColor.
  2014-09-01: Add --iencoding. Multifile. Fix --color.
  2015-09-11: Drop -s, add --spaceAs OK, fix code points. --lfAs likewise.
  2019-11-16: Update color use.
  2020-11-19: New layout.
  2021-04-07: Add --oformat and its various choices.


=head1 To do

Option to color-code white-space and/or newlines differently?
See C<colorizeWhiteSpace()>, below.


=head1 Rights

Copyright 2007-01-16 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share Alike 3.0 Unported License.
For further information on this license, see
L<https://creativecommons.org/licenses/by-sa/3.0>.

For the most recent version, see L<http://www.derose.net/steve/utilities> or
L<https://github.com/sderose>.


=cut


###############################################################################
# Process options
#
my $color         = 0;
my $iencoding     = "";
my $lfAs          = "NL";
my $oFormat       = "XENT";
my $pics          = 1;
my $quiet         = 0;
my $spaceAs       = "OK";
my $uri           = 0;
my $verbose       = 0;
my $whichColor    = "/yellow";

Getopt::Long::Configure ("ignore_case");
my $result = GetOptions(
    "color!"            => \$color,
    "h|help|?"          => sub { system "perldoc $0"; exit; },
    "iencoding=s"       => \$iencoding,
    "lfAs=s"            => \$lfAs,
    "oFormat=s"         => \$oFormat,
    "pics|pix!"         => \$pics,
    "q|quiet!"          => \$quiet,
    "spaceAs=s"         => \$spaceAs,
    "uri!"              => \$uri,
    "v|verbose+"        => \$verbose,
    "version"           => sub {
        die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
    },
    "whichColor=s"      => \$whichColor,
    );

($result) || die "Bad options.\n";

$spaceAs = uc($spaceAs);
($spaceAs =~ m/^(B|U|SP|OK|COLOR)$/) || (len($spaceAs)==1) ||
    die "-spaceAs must be 'B', 'U', 'SP', 'COLOR', or 'OK'.\n";

$lfAs = uc($lfAs);
($lfAs =~ m/^(LF|NL|OK)$/i) || (len($lfAs)==1) ||
    die "-lfAs must be 'LF' or 'NL' or 'OK'.\n";

my %spaceCodes = (
    "SP"       => chr(0x2420), # SP
    "B"        => chr(0x2422), # B/
    "U"        => chr(0x2423), # _
    "OK"       => ' ',
    "NBSP"     => chr(0x00A0), # Non-breaking space
    );

my %lfCodes = (
    "LF"       => chr(0x240A),
    "NL"       => chr(0x2424),
    "OK"       => "\n",
);

my @names = ( # currently unused
    "NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL",
    "BS",  "HT",  "NL",  "VT",  "FF",  "CR",  "SO",  "SI",
    "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB",
    "CAN", "EM",  "SUB", "ESC", "FS",  "GS",  "RS",  "US",
    "SP");

my $con = my $coff = "";
if ($color) {
    sjdUtils::setColors(1);
    $con  = sjdUtils::getColorString($whichColor);
    $coff = sjdUtils::getColorString("off");
}

print "";
binmode(STDOUT, ":encoding(utf8)");


# Apply colorizing to whitespaces.
#
my %spaceMap = (
    ' '  => sjdUtils::getColorString('red'),
    "\t" => sjdUtils::getColorString('yellow'),
    "\r" => sjdUtils::getColorString('green'),
    "\n" => sjdUtils::getColorString('blue'),
    #"\s" => sjdUtils::getColorString('/magenta'),
);
my $offSequence = sjdUtils::getColorString('default');

sub colorizeWhiteSpace {
    my ($s) = @_;
    for my $x (keys %spaceMap) {
        my $y = $spaceMap{$x};
        $s =~ s/($x+)/$y$1$offSequence/g;
    }
}

sub makeDisplayable {
    # Convert just one character.
    my ($c, $fmt) = @_;
    if (index(" \t\r\n", $c) > -1)) {
        if ($spaceAs eq "COLOR") { return $c; }
        if ($c eq " " ) { return $spaceCodes{$spaceAs}; }
        if ($c eq "\n") { return $lfCodes{$lfAs}; }
    }
    my $n = ord($c)
    if ($n < 32 && $pics) {
        return chr(0x2400 + $n);
    }

    if ($fmt eq "UPLUS") {                 # U+2022
        return sprintf("U+%04x", $n);
    }
    elsif ($fmt eq "UTF") {                # \xe2\x80\xa2
        return getUTF8local($n, "\\x");
    }
    elsif ($fmt eq "URI") {                # %e2%80%a2
        return getUTF8local($n, "%");
    }
    elsif ($fmt eq "DENT") {               # &#8226;
        return sprintf("&#%04x;", $n);
    }
    elsif ($fmt eq "XENT") {               # &#x2022;
        ($n > 0xFFFF) && warn "Char out of range for \\x: $n.\n";
        return sprintf("&#x%04x;", $n);
    }
    elsif ($fmt eq "NENT") {               # &bull;
        my $buf = HTML::Entities::encode(chr($n));
        if ($buf =~ m/^&#/) { $buf = sprintf("&#x%04x;", $n); }
        return $buf;
    }
    elsif ($fmt eq "PY4") {                # \u2022
        ($n > 0xFFFF) && warn "Char out of range for \\u: $n.\n";
        return sprintf("\\u%04x", $n);
    }
    elsif ($fmt eq "PY8") {                # \U00002022
        return sprintf("\\U%08x", $n);
    }
    elsif ($fmt eq "PYBR") {               # \x{2022}
        return sprintf("\\x{%4x}", $n);
    }
    else {
        die "Unknown --oformat '$fmt'.\n";
    }
}

sub getUTF8local {  # From "ord" script
    my ($n, $sep) = @_;
    if (!defined $sep) { $sep = "%"; }
    my $utf8form= Encode::encode('utf8', chr($n));
    my $ux = ();
    for (my $i=0; $i<length($utf8form); $i++) {
        $ux .= sprintf("%s%02x", $sep, ord(substr($utf8form,$i,1)));
    }
    return($ux);
}


###############################################################################
# Main
#
if (!$ARGV[0]) {
    push @ARGV, "-";
    if (-t STDIN && !$quiet) {
        vMsg(0, "Waiting for STDIN...");
    }
}

if ($verbose) {
    warn "Testing colors:\n";
    for my $x (keys %spaceMap) {
        my $y = $spaceMap{$x};
        warn sprintf("    %sHello%sSequence\n", $x, $y);
    }
}

while (my $file = shift) {
    open(my $fh, "<$file") || die "Can't find file '$file'.\n";
    if ($iencoding) {
        binmode($fh, $iencoding);
    }

    while (my $rec = <$fh>) {
        my $buf = "";
        for (my $i=0; $i<len($rec); $i++) {
            $buf .= makeDisplayable(substr($rec, $i, 1));
        }
        if ($spaceAs eq "COLOR") {
            $rec = colorizeWhiteSpace($rec);
        }
        elsif ($uri) {
            $rec = sjdUtils::escapeURI($rec, "DFT", $spaceAs, $lfAs);
        }
        if ($color) {
            $rec =~ s/(\\x[0-9a-f][0-9a-f]|[^[:ascii:]]+)/$con$1$coff/g;
        }
        print "$rec\n";
    } # EOF
    close($fh);
}

exit;
