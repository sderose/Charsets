#!/usr/bin/env perl -w
#
# transliterate
#
# 2009-06-25ff: Written by Steven J. DeRose.
#
# To do:
#     output options: entities named/dev/hex, utf-8
#     support xml and only transliterate content
#     Move data to XSV.
#
use strict;
use Getopt::Long;

our $VERSION_DATE = "2012-09-12";

my $e = ""; # error-message prefix

my $entities    = 0;
my $entBase     = 16;
my $entLength   = 4;
my $iencoding   = "";
my $ilineends   = "U";
my $markup      = 0;
my $oencoding   = "";
my $olineends   = "U";
my $prefix      = "";
my $quiet       = 0;
my $stable      = 0;
my $verbose     = 0;
my $verses      = 0;
my $xml         = 0;


###############################################################################
#
Getopt::Long::Configure ("ignore_case");
my $result = GetOptions(
    "entities!"               => \$entities,
    "entBase=i"               => \$entBase,
    "entLength=i"             => \$entLength,
    "h|help"                  => sub { system "perldoc $0"; exit; },
    "iencoding=s"             => \$iencoding,
    "ilineends=s"             => \$ilineends,
    "markup!"                 => \$markup,
    "oencoding=s"             => \$oencoding,
    "olineends=s"             => \$olineends,
    "prefix=s"                => \$prefix,
    "q!"                      => \$quiet,
    "stable!"                 => \$stable,
    "unicode!"                => sub { $iencoding = "utf8"; },
    "v+"                      => \$verbose,
    "version"                 => sub {
        die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
    },
    "verses!"                 => \$verses,
    "xml!"					  => \$xml
    );

($result) || die "Bad options.\n";


###############################################################################
#
($entBase==10 || $entBase==16) ||
    die "-entBase must be 10 or 16.";

if ($markup) { $verses = 1; }
($verbose) && warn "Markup: $markup\b";


###############################################################################
# Set implied options, validate option values...
#
my $file = shift;
my $fh; my $fh2;
if ($file) {
    (-f $file) || die "Can't find input file '$file'.\n";
}
else {
    $file = \*STDIN;
}


open($fh, $file) ||
  die "Failed to open input file '$file'.\n";

if ($iencoding) {
  binmode($fh, ":encoding($iencoding)");
}
if ($oencoding) {
  print "";
  binmode(STDOUT, ":encoding($oencoding)");
}

$ilineends = uc(substr($ilineends."U",0,1));
if    ($ilineends eq "M") { $/ = chr(13); }
elsif ($ilineends eq "D") { $/ = chr(13).chr(10); }
else { }

$olineends = uc(substr($olineends."U",0,1));
if    ($olineends eq "M") { $\ = chr(13); }
elsif ($olineends eq "D") { $\ = chr(13).chr(10); }
else { }


###############################################################################
###############################################################################
# Main
#

# Set up the translation tables
#
my %ccatStrings = ();    # From strings to Unicode descriptive names
ccat();
my %grCodes = ();        # From names to Unicode code points
greekCodes();

# Sort the strings so we match longest first
#
my @checkOrder = sort ByLength keys %ccatStrings;
($verbose) && warn "keys:\n    " . join("\n    ",@checkOrder) . "\n";

# For -stable, sort 'em out by first character for speed.
my @stableTable = ();
if ($stable) {
	for (my $i=0; $i<scalar @checkOrder; $i++) {
   		$stableTable[ord(substr($checkOrder[$i],0,1))] .= "$checkOrder[$i]\n";
    }
}

# Make a parallel array of what to output for each matchable string.
#
($verbose) && warn "Setting up code conversion table.\n";
my @outputForms = ();
for (my $i=0; $i<scalar @checkOrder; $i++) {
    my $str = $checkOrder[$i];
    my $name = $ccatStrings{$str};
    (defined $grCodes{$name}) ||
        die "Unicode name '$name' (for '$str'): no code-point found.\n";
    ($grCodes{$name} - 1 > 31) ||
        die "Code point for '$name' is non-numeric or too small.\n";
    if ($entities) {
	    $outputForms[$i] = ($entBase==10)
            ? sprintf("&%0$entLength"."d;", $grCodes{$name})
            : sprintf("&%0$entLength"."x;", $grCodes{$name});
    }
	else {
	    $outputForms[$i] = chr($grCodes{$name});
    }
    # And escape anything regexy in the strings to match...
    $checkOrder[$i] =~ s/([\(\)\/\|\$\^\\.*?+])/\\$1/g;
}

###############################################################################
#
($verbose) && warn "Starting conversion.\n";
my $lnum = 0;
my $lastChapNum = 0;
my $verseNum = "";
while (my $rec = <$fh>) {
    $lnum++;
    chomp $rec;
    if ($verses) {
        $rec =~ s/^(.*?\s+)//;
        $verseNum = $1;
    }
    if ($stable) {
		die "-stable (output strings can = other input) is not implemented.\n";
		# if implemented, separate strings to match by first char.
        my $buf = "";
	    for (my $i=0; $i<length($rec); $i++) {
			my $c = substr($rec,$i,1);
			if ($stableTable[ord($c)]) {
				# Look for first match, then sub
			}
			else {
				$buf .= $c;
			}
		}
		$rec = $buf;
	}
	else {
	    for (my $i=0; $i<scalar @checkOrder; $i++) {
    	    $rec =~ s/$checkOrder[$i]/$outputForms[$i]/g;
		}
    }
    if ($markup) {
        (my $chapNum = $verseNum) =~ s/\..*$//;
        if ($chapNum != $lastChapNum) {
		    if ($lastChapNum > 0) { print "\</chapter>\n\n"; }
			print "<chapter id=\"" . ($prefix ? "$prefix.":"")
			    . "$chapNum\">\n";
			$lastChapNum = $chapNum;
		}
		$rec =~ s/&/&amp;/g;
		$rec =~ s/</&lt;/g;
        $verseNum =~ s/:\s+//;
	    print "<v id=\"" . ($prefix ? "$prefix.":"") . "$verseNum\">$rec</v>\n";
    }
	else {
	    print "$verseNum$rec\n";
	}
}

if ($markup) {
    print "\</chapter>\n";
}

($quiet) || warn "Done, $lnum records processed.\n";

exit;


###############################################################################
###############################################################################
# Sort strings to be replaced, by decreasing length. Thus we always catch
#     longest first.
#
sub ByLength   {
    if    (length($a) < length($b)) { return(1);  }
    elsif (length($a) > length($b)) { return(-1); }
    else                            { return(0);  }
}


###############################################################################
# Define a hash of Greek characters, from names to Unicode code-point.
# The names used are the Unicode names, except:
#     GREEK ==> GR, except lowercase letters 'gr'.
#     CAPITAL, SMALL, LETTER, WITH, and AND are omitted.
#     Space is replaced by underscore.
#
# The diacritical marks are called by their Unicode names:
#     Dasia				Rough breathing / reverse comma
#     Psili				Smooth breathing / comma
#     Varia				Grave
#     Tonos				Acute
#     Oxia  			Acute
#     Macron			Macron / overbar
#     Dialytica			Umlaut / double-dot
#     Ypogegrammeni     Iota subscript
#     Prosgegrammeni    Iota following
#     Perispomeni       Concave down / circumflex
#     Vrachy			Concave up / breve
#     Hook
#
sub greekCodes {
    %grCodes = (
    "GR_ALPHA"							=> 0x0391,
    "GR_BETA"							=> 0x0392,
    "GR_GAMMA"							=> 0x0393,
    "GR_DELTA"							=> 0x0394,
    "GR_EPSILON"						=> 0x0395,
    "GR_ZETA"							=> 0x0396,
    "GR_ETA"							=> 0x0397,
    "GR_THETA"							=> 0x0398,
    "GR_IOTA"							=> 0x0399,
    "GR_KAPPA"							=> 0x039A,
    "GR_LAMDA"							=> 0x039B,
    "GR_MU"								=> 0x039C,
    "GR_NU"								=> 0x039D,
    "GR_XI"								=> 0x039E,
    "GR_OMICRON"						=> 0x039F,
    "GR_PI"								=> 0x03A0,
    "GR_RHO"							=> 0x03A1,
    "GR_SIGMA"							=> 0x03A3,
    "GR_TAU"							=> 0x03A4,
    "GR_UPSILON"						=> 0x03A5,
    "GR_PHI"							=> 0x03A6,
    "GR_CHI"							=> 0x03A7,
    "GR_PSI"							=> 0x03A8,
    "GR_OMEGA"							=> 0x03A9,

    "gr_ALPHA"							=> 0x03B1,
    "gr_BETA"							=> 0x03B2,
    "gr_GAMMA"							=> 0x03B3,
    "gr_DELTA"							=> 0x03B4,
    "gr_EPSILON"						=> 0x03B5,
    "gr_ZETA"							=> 0x03B6,
    "gr_ETA"							=> 0x03B7,
    "gr_THETA"							=> 0x03B8,
    "gr_IOTA"							=> 0x03B9,
    "gr_KAPPA"							=> 0x03BA,
    "gr_LAMDA"							=> 0x03BB,
    "gr_MU"								=> 0x03BC,
    "gr_NU"								=> 0x03BD,
    "gr_XI"								=> 0x03BE,
    "gr_OMICRON"						=> 0x03BF,
    "gr_PI"								=> 0x03C0,
    "gr_RHO"							=> 0x03C1,
    "gr_FINAL_SIGMA"					=> 0x03C2,
    "gr_SIGMA"							=> 0x03C3,
    "gr_TAU"							=> 0x03C4,
    "gr_UPSILON"						=> 0x03C5,
    "gr_PHI"							=> 0x03C6,
    "gr_CHI"							=> 0x03C7,
    "gr_PSI"							=> 0x03C8,
    "gr_OMEGA"							=> 0x03C9,

    "GR_ALPHA_DASIA_OXIA_PROSGEGRAMMENI"			=> 0x1F8D,
    "gr_ALPHA_DASIA_OXIA_YPOGEGRAMMENI"				=> 0x1F85,
    "gr_ALPHA_DASIA_OXIA"							=> 0x1F05,
    "GR_ALPHA_DASIA_OXIA"							=> 0x1F0D,
    "GR_ALPHA_DASIA_PERISPOMENI_PROSGEGRAMMENI"		=> 0x1F8F,
    "gr_ALPHA_DASIA_PERISPOMENI_YPOGEGRAMMENI"		=> 0x1F87,
    "gr_ALPHA_DASIA_PERISPOMENI"					=> 0x1F07,
    "GR_ALPHA_DASIA_PERISPOMENI"					=> 0x1F0F,
    "GR_ALPHA_DASIA_PROSGEGRAMMENI"					=> 0x1F89,
    "GR_ALPHA_DASIA_VARIA_PROSGEGRAMMENI"			=> 0x1F8B,
    "gr_ALPHA_DASIA_VARIA_YPOGEGRAMMENI"			=> 0x1F83,
    "gr_ALPHA_DASIA_VARIA"							=> 0x1F03,
    "GR_ALPHA_DASIA_VARIA"							=> 0x1F0B,
    "gr_ALPHA_DASIA_YPOGEGRAMMENI"					=> 0x1F81,
    "gr_ALPHA_DASIA"								=> 0x1F01,
    "GR_ALPHA_DASIA"								=> 0x1F09,
    "gr_ALPHA_MACRON"								=> 0x1FB1,
    "GR_ALPHA_MACRON"								=> 0x1FB9,
    "gr_ALPHA_OXIA_YPOGEGRAMMENI"					=> 0x1FB4,
    "GR_ALPHA_OXIA"									=> 0x1FBB,
    "gr_ALPHA_OXIA"									=> 0x1F71,
    "gr_ALPHA_PERISPOMENI_YPOGEGRAMMENI"			=> 0x1FB7,
    "gr_ALPHA_PERISPOMENI"							=> 0x1FB6,
    "GR_ALPHA_PROSGEGRAMMENI"						=> 0x1FBC,
    "GR_ALPHA_PSILI_OXIA_PROSGEGRAMMENI"			=> 0x1F8C,
    "gr_ALPHA_PSILI_OXIA_YPOGEGRAMMENI"				=> 0x1F84,
    "gr_ALPHA_PSILI_OXIA"							=> 0x1F04,
    "GR_ALPHA_PSILI_OXIA"							=> 0x1F0C,
    "GR_ALPHA_PSILI_PERISPOMENI_PROSGEGRAMMENI"		=> 0x1F8E,
    "gr_ALPHA_PSILI_PERISPOMENI_YPOGEGRAMMENI"		=> 0x1F86,
    "gr_ALPHA_PSILI_PERISPOMENI"					=> 0x1F06,
    "GR_ALPHA_PSILI_PERISPOMENI"					=> 0x1F0E,
    "GR_ALPHA_PSILI_PROSGEGRAMMENI"					=> 0x1F88,
    "GR_ALPHA_PSILI_VARIA_PROSGEGRAMMENI"			=> 0x1F8A,
    "gr_ALPHA_PSILI_VARIA_YPOGEGRAMMENI"			=> 0x1F82,
    "gr_ALPHA_PSILI_VARIA"							=> 0x1F02,
    "GR_ALPHA_PSILI_VARIA"							=> 0x1F0A,
    "gr_ALPHA_PSILI_YPOGEGRAMMENI"					=> 0x1F80,
    "gr_ALPHA_PSILI"								=> 0x1F00,
    "GR_ALPHA_PSILI"								=> 0x1F08,
    "GR_ALPHA_TONOS"								=> 0x0386,
    "gr_ALPHA_TONOS"								=> 0x03AC,
    "gr_ALPHA_VARIA_YPOGEGRAMMENI"					=> 0x1FB2,
    "GR_ALPHA_VARIA"								=> 0x1FBA,
    "gr_ALPHA_VARIA"								=> 0x1F70,
    "gr_ALPHA_VRACHY"								=> 0x1FB0,
    "GR_ALPHA_VRACHY"								=> 0x1FB8,
    "gr_ALPHA_YPOGEGRAMMENI"						=> 0x1FB3,

    "gr_EPSILON_DASIA_OXIA"							=> 0x1F15,
    "GR_EPSILON_DASIA_OXIA"							=> 0x1F1D,
    "gr_EPSILON_DASIA_VARIA"						=> 0x1F13,
    "GR_EPSILON_DASIA_VARIA"						=> 0x1F1B,
    "gr_EPSILON_DASIA"								=> 0x1F11,
    "GR_EPSILON_DASIA"								=> 0x1F19,
    "gr_EPSILON_OXIA"								=> 0x1F73,
    "GR_EPSILON_OXIA"								=> 0x1FC9,
    "gr_EPSILON_PSILI_OXIA"							=> 0x1F14,
    "GR_EPSILON_PSILI_OXIA"							=> 0x1F1C,
    "gr_EPSILON_PSILI_VARIA"						=> 0x1F12,
    "GR_EPSILON_PSILI_VARIA"						=> 0x1F1A,
    "gr_EPSILON_PSILI"								=> 0x1F10,
    "GR_EPSILON_PSILI"								=> 0x1F18,
    "GR_EPSILON_TONOS"								=> 0x0388,
    "gr_EPSILON_TONOS"								=> 0x03AD,
    "gr_EPSILON_VARIA"								=> 0x1F72,
    "GR_EPSILON_VARIA"								=> 0x1FC8,

    "GR_ETA_DASIA_OXIA_PROSGEGRAMMENI"				=> 0x1F9D,
    "gr_ETA_DASIA_OXIA_YPOGEGRAMMENI"				=> 0x1F95,
    "gr_ETA_DASIA_OXIA"								=> 0x1F25,
    "GR_ETA_DASIA_OXIA"								=> 0x1F2D,
    "GR_ETA_DASIA_PERISPOMENI_PROSGEGRAMMENI"		=> 0x1F9F,
    "gr_ETA_DASIA_PERISPOMENI_YPOGEGRAMMENI"		=> 0x1F97,
    "gr_ETA_DASIA_PERISPOMENI"						=> 0x1F27,
    "GR_ETA_DASIA_PERISPOMENI"						=> 0x1F2F,
    "GR_ETA_DASIA_PROSGEGRAMMENI"					=> 0x1F99,
    "GR_ETA_DASIA_VARIA_PROSGEGRAMMENI"				=> 0x1F9B,
    "gr_ETA_DASIA_VARIA_YPOGEGRAMMENI"				=> 0x1F93,
    "gr_ETA_DASIA_VARIA"							=> 0x1F23,
    "GR_ETA_DASIA_VARIA"							=> 0x1F2B,
    "gr_ETA_DASIA_YPOGEGRAMMENI"					=> 0x1F91,
    "gr_ETA_DASIA"									=> 0x1F21,
    "GR_ETA_DASIA"									=> 0x1F29,
    "gr_ETA_OXIA_YPOGEGRAMMENI"						=> 0x1FC4,
    "GR_ETA_OXIA"									=> 0x1FCB,
    "gr_ETA_OXIA"									=> 0x1F75,
    "gr_ETA_PERISPOMENI_YPOGEGRAMMENI"				=> 0x1FC7,
    "gr_ETA_PERISPOMENI"							=> 0x1FC6,
    "GR_ETA_PROSGEGRAMMENI"							=> 0x1FCC,
    "GR_ETA_PSILI_OXIA_PROSGEGRAMMENI"				=> 0x1F9C,
    "gr_ETA_PSILI_OXIA_YPOGEGRAMMENI"				=> 0x1F94,
    "gr_ETA_PSILI_OXIA"								=> 0x1F24,
    "GR_ETA_PSILI_OXIA"								=> 0x1F2C,
    "GR_ETA_PSILI_PERISPOMENI_PROSGEGRAMMENI"		=> 0x1F9E,
    "gr_ETA_PSILI_PERISPOMENI_YPOGEGRAMMENI"		=> 0x1F96,
    "gr_ETA_PSILI_PERISPOMENI"						=> 0x1F26,
    "GR_ETA_PSILI_PERISPOMENI"						=> 0x1F2E,
    "GR_ETA_PSILI_PROSGEGRAMMENI"					=> 0x1F98,
    "GR_ETA_PSILI_VARIA_PROSGEGRAMMENI"				=> 0x1F9A,
    "gr_ETA_PSILI_VARIA_YPOGEGRAMMENI"				=> 0x1F92,
    "gr_ETA_PSILI_VARIA"							=> 0x1F22,
    "GR_ETA_PSILI_VARIA"							=> 0x1F2A,
    "gr_ETA_PSILI_YPOGEGRAMMENI"					=> 0x1F90,
    "gr_ETA_PSILI"									=> 0x1F20,
    "GR_ETA_PSILI"									=> 0x1F28,
    "GR_ETA_TONOS"									=> 0x0389,
    "gr_ETA_TONOS"									=> 0x03AE,
    "gr_ETA_VARIA_YPOGEGRAMMENI"					=> 0x1FC2,
    "GR_ETA_VARIA"									=> 0x1FCA,
    "gr_ETA_VARIA"									=> 0x1F74,
    "gr_ETA_YPOGEGRAMMENI"							=> 0x1FC3,

    "gr_IOTA_DASIA_OXIA"							=> 0x1F35,
    "GR_IOTA_DASIA_OXIA"							=> 0x1F3D,
    "gr_IOTA_DASIA_PERISPOMENI"						=> 0x1F37,
    "GR_IOTA_DASIA_PERISPOMENI"						=> 0x1F3F,
    "gr_IOTA_DASIA_VARIA"							=> 0x1F33,
    "GR_IOTA_DASIA_VARIA"							=> 0x1F3B,
    "gr_IOTA_DASIA"									=> 0x1F31,
    "GR_IOTA_DASIA"									=> 0x1F39,
    "gr_IOTA_DIALYTIKA_OXIA"						=> 0x1FD3,
    "gr_IOTA_DIALYTIKA_PERISPOMENI"					=> 0x1FD7,
    "gr_IOTA_DIALYTIKA_TONOS"						=> 0x0390,
    "gr_IOTA_DIALYTIKA_VARIA"						=> 0x1FD2,
    "GR_IOTA_DIALYTIKA"								=> 0x03AA,
    "gr_IOTA_DIALYTIKA"								=> 0x03CA,
    "gr_IOTA_MACRON"								=> 0x1FD1,
    "GR_IOTA_MACRON"								=> 0x1FD9,
    "gr_IOTA_OXIA"									=> 0x1F77,
    "GR_IOTA_OXIA"									=> 0x1FDB,
    "gr_IOTA_PERISPOMENI"							=> 0x1FD6,
    "gr_IOTA_PSILI_OXIA"							=> 0x1F34,
    "GR_IOTA_PSILI_OXIA"							=> 0x1F3C,
    "gr_IOTA_PSILI_PERISPOMENI"						=> 0x1F36,
    "GR_IOTA_PSILI_PERISPOMENI"						=> 0x1F3E,
    "gr_IOTA_PSILI_VARIA"							=> 0x1F32,
    "GR_IOTA_PSILI_VARIA"							=> 0x1F3A,
    "gr_IOTA_PSILI"									=> 0x1F30,
    "GR_IOTA_PSILI"									=> 0x1F38,
    "GR_IOTA_TONOS"									=> 0x038A,
    "gr_IOTA_TONOS"									=> 0x03AF,
    "gr_IOTA_VARIA"									=> 0x1F76,
    "GR_IOTA_VARIA"									=> 0x1FDA,
    "gr_IOTA_VRACHY"								=> 0x1FD0,
    "GR_IOTA_VRACHY"								=> 0x1FD8,

    "gr_OMICRON_DASIA_OXIA"							=> 0x1F45,
    "GR_OMICRON_DASIA_OXIA"							=> 0x1F4D,
    "gr_OMICRON_DASIA_VARIA"						=> 0x1F43,
    "GR_OMICRON_DASIA_VARIA"						=> 0x1F4B,
    "gr_OMICRON_DASIA"								=> 0x1F41,
    "GR_OMICRON_DASIA"								=> 0x1F49,
    "gr_OMICRON_OXIA"								=> 0x1F79,
    "GR_OMICRON_OXIA"								=> 0x1FF9,
    "gr_OMICRON_PSILI_OXIA"							=> 0x1F44,
    "GR_OMICRON_PSILI_OXIA"							=> 0x1F4C,
    "gr_OMICRON_PSILI_VARIA"						=> 0x1F42,
    "GR_OMICRON_PSILI_VARIA"						=> 0x1F4A,
    "gr_OMICRON_PSILI"								=> 0x1F40,
    "GR_OMICRON_PSILI"								=> 0x1F48,
    "GR_OMICRON_TONOS"								=> 0x038C,
    "gr_OMICRON_TONOS"								=> 0x03CC,
    "gr_OMICRON_VARIA"								=> 0x1F78,
    "GR_OMICRON_VARIA"								=> 0x1FF8,

    "GR_RHO_SYMBOL"									=> 0x03F1,
    "gr_RHO_DASIA"									=> 0x1FE5,
    "GR_RHO_DASIA"									=> 0x1FEC,
    "gr_RHO_PSILI"									=> 0x1FE4,
    "GR_RHO_STROKE_SYMBOL"							=> 0x03FC,

#    "GR_UPSILON_ACUTE_HOOK"							=> 0x03D3,
    "gr_UPSILON_DASIA_OXIA"							=> 0x1F55,
    "GR_UPSILON_DASIA_OXIA"							=> 0x1F5D,
    "gr_UPSILON_DASIA_PERISPOMENI"					=> 0x1F57,
    "GR_UPSILON_DASIA_PERISPOMENI"					=> 0x1F5F,
    "gr_UPSILON_DASIA_VARIA"						=> 0x1F53,
    "GR_UPSILON_DASIA_VARIA"						=> 0x1F5B,
    "gr_UPSILON_DASIA"								=> 0x1F51,
    "GR_UPSILON_DASIA"								=> 0x1F59,
#    "GR_UPSILON_DIAERESIS_HOOK"						=> 0x03D4,
    "gr_UPSILON_DIALYTIKA_OXIA"						=> 0x1FE3,
    "gr_UPSILON_DIALYTIKA_PERISPOMENI"				=> 0x1FE7,
    "gr_UPSILON_DIALYTIKA_TONOS"					=> 0x03B0,
    "gr_UPSILON_DIALYTIKA_VARIA"					=> 0x1FE2,
    "GR_UPSILON_DIALYTIKA"							=> 0x03AB,
    "gr_UPSILON_DIALYTIKA"							=> 0x03CB,
#    "GR_UPSILON_HOOK"								=> 0x03D2,
    "gr_UPSILON_MACRON"								=> 0x1FE1,
    "GR_UPSILON_MACRON"								=> 0x1FE9,
    "gr_UPSILON_OXIA"								=> 0x1F7B,
    "GR_UPSILON_OXIA"								=> 0x1FEB,
    "gr_UPSILON_PERISPOMENI"						=> 0x1FE6,
    "gr_UPSILON_PSILI_OXIA"							=> 0x1F54,
    "gr_UPSILON_PSILI_PERISPOMENI"					=> 0x1F56,
    "gr_UPSILON_PSILI_VARIA"						=> 0x1F52,
    "gr_UPSILON_PSILI"								=> 0x1F50,
    "GR_UPSILON_TONOS"								=> 0x038E,
    "gr_UPSILON_TONOS"								=> 0x03CD,
    "gr_UPSILON_VARIA"								=> 0x1F7A,
    "GR_UPSILON_VARIA"								=> 0x1FEA,
    "gr_UPSILON_VRACHY"								=> 0x1FE0,
    "GR_UPSILON_VRACHY"								=> 0x1FE8,

    "GR_OMEGA_DASIA_OXIA_PROSGEGRAMMENI"			=> 0x1FAD,
    "gr_OMEGA_DASIA_OXIA_YPOGEGRAMMENI"				=> 0x1FA5,
    "gr_OMEGA_DASIA_OXIA"							=> 0x1F65,
    "GR_OMEGA_DASIA_OXIA"							=> 0x1F6D,
    "GR_OMEGA_DASIA_PERISPOMENI_PROSGEGRAMMENI"		=> 0x1FAF,
    "gr_OMEGA_DASIA_PERISPOMENI_YPOGEGRAMMENI"		=> 0x1FA7,
    "gr_OMEGA_DASIA_PERISPOMENI"					=> 0x1F67,
    "GR_OMEGA_DASIA_PERISPOMENI"					=> 0x1F6F,
    "GR_OMEGA_DASIA_PROSGEGRAMMENI"					=> 0x1FA9,
    "GR_OMEGA_DASIA_VARIA_PROSGEGRAMMENI"			=> 0x1FAB,
    "gr_OMEGA_DASIA_VARIA_YPOGEGRAMMENI"			=> 0x1FA3,
    "gr_OMEGA_DASIA_VARIA"							=> 0x1F63,
    "GR_OMEGA_DASIA_VARIA"							=> 0x1F6B,
    "gr_OMEGA_DASIA_YPOGEGRAMMENI"					=> 0x1FA1,
    "gr_OMEGA_DASIA"								=> 0x1F61,
    "GR_OMEGA_DASIA"								=> 0x1F69,
    "gr_OMEGA_OXIA_YPOGEGRAMMENI"					=> 0x1FF4,
    "GR_OMEGA_OXIA"									=> 0x1FFB,
    "gr_OMEGA_OXIA"									=> 0x1F7D,
    "gr_OMEGA_PERISPOMENI_YPOGEGRAMMENI"			=> 0x1FF7,
    "gr_OMEGA_PERISPOMENI"							=> 0x1FF6,
    "GR_OMEGA_PROSGEGRAMMENI"						=> 0x1FFC,
    "GR_OMEGA_PSILI_OXIA_PROSGEGRAMMENI"			=> 0x1FAC,
    "gr_OMEGA_PSILI_OXIA_YPOGEGRAMMENI"				=> 0x1FA4,
    "gr_OMEGA_PSILI_OXIA"							=> 0x1F64,
    "GR_OMEGA_PSILI_OXIA"							=> 0x1F6C,
    "GR_OMEGA_PSILI_PERISPOMENI_PROSGEGRAMMENI"		=> 0x1FAE,
    "gr_OMEGA_PSILI_PERISPOMENI_YPOGEGRAMMENI"		=> 0x1FA6,
    "gr_OMEGA_PSILI_PERISPOMENI"					=> 0x1F66,
    "GR_OMEGA_PSILI_PERISPOMENI"					=> 0x1F6E,
    "GR_OMEGA_PSILI_PROSGEGRAMMENI"					=> 0x1FA8,
    "GR_OMEGA_PSILI_VARIA_PROSGEGRAMMENI"			=> 0x1FAA,
    "gr_OMEGA_PSILI_VARIA_YPOGEGRAMMENI"			=> 0x1FA2,
    "gr_OMEGA_PSILI_VARIA"							=> 0x1F62,
    "GR_OMEGA_PSILI_VARIA"							=> 0x1F6A,
    "gr_OMEGA_PSILI_YPOGEGRAMMENI"					=> 0x1FA0,
    "gr_OMEGA_PSILI"								=> 0x1F60,
    "GR_OMEGA_PSILI"								=> 0x1F68,
    "GR_OMEGA_TONOS"								=> 0x038F,
    "gr_OMEGA_TONOS"								=> 0x03CE,
    "gr_OMEGA_VARIA_YPOGEGRAMMENI"					=> 0x1FF2,
    "gr_OMEGA_VARIA"								=> 0x1F7C,
    "GR_OMEGA_VARIA"								=> 0x1FFA,
    "gr_OMEGA_YPOGEGRAMMENI"						=> 0x1FF3,


    "GR_SUBSCRIPT_SMALL_BETA"						=> 0x1D66,
    "GR_SUBSCRIPT_SMALL_CHI"						=> 0x1D6A,
    "GR_SUBSCRIPT_SMALL_GAMMA"						=> 0x1D67,
    "GR_SUBSCRIPT_SMALL_PHI"						=> 0x1D69,
    "GR_SUBSCRIPT_SMALL_RHO"						=> 0x1D68,

    "GR_SMALL_CAPITAL_GAMMA"						=> 0x1D26,
    "GR_SMALL_CAPITAL_LAMDA"						=> 0x1D27,
    "GR_SMALL_CAPITAL_PI"							=> 0x1D28,
    "GR_SMALL_CAPITAL_PSI"							=> 0x1D2A,
    "GR_SMALL_CAPITAL_RHO"							=> 0x1D29,

    "GR_THETA_SYMBOL"								=> 0x03D1,
    "GR_PHI_SYMBOL"									=> 0x03D5,
    "GR_PI_SYMBOL"									=> 0x03D6,
    "GR_REVERSED_LUNATE_EPSILON_SYMBOL"				=> 0x03F6,
    "GR_LUNATE_EPSILON_SYMBOL"						=> 0x03F5,
    "GR_LUNATE_SIGMA_SYMBOL"						=> 0x03F2,
    "GR_BETA_SYMBOL"								=> 0x03D0,

    "MODIFIER_SMALL_GR_GAMMA"						=> 0x1D5E,
    "MODIFIER_SMALL_GR_PHI"							=> 0x1D60,

    "GR_CAPITAL_DOTTED_LUNATE_SIGMA_SYMBOL"			=> 0x03FE,
    "GR_CAPITAL_KAI_SYMBOL"							=> 0x03CF,
    "GR_CAPITAL_LUNATE_SIGMA_SYMBOL"				=> 0x03F9,
    "GR_CAPITAL_REVERSED_DOTTED_LUNATE_SIGMA_SYMBOL"	=> 0x03FF,
    "GR_CAPITAL_REVERSED_LUNATE_SIGMA_SYMBOL"		=> 0x03FD,
    "GR_CAPITAL_THETA_SYMBOL"						=> 0x03F4,

    "GR_KAI_SYMBOL"									=> 0x03D7,
    "GR_KAPPA_SYMBOL"								=> 0x03F0,

    "GR_PERISPOMENI"								=> 0x1FC0,
    "GR_PROSGEGRAMMENI"								=> 0x1FBE,
    "GR_PSILI_OXIA"									=> 0x1FCE,
    "GR_PSILI_PERISPOMENI"							=> 0x1FCF,
    "GR_PSILI_VARIA"								=> 0x1FCD,
    "GR_PSILI"										=> 0x1FBF,
    "gr_SAMPI"										=> 0x03E1,
    "gr_SAN"										=> 0x03FB,
    "GR_SAN"										=> 0x03FA,
    "GR_SHO"										=> 0x03F7,
    "gr_SHO"										=> 0x03F8,
    "gr_STIGMA"										=> 0x03DB,
    "GR_VARIA"										=> 0x1FEF,
    "gr_KOPPA"										=> 0x03DF,
    "GR_KORONIS"									=> 0x1FBD,
    "GR_ARCHAIC_KOPPA"								=> 0x03D8,
    "GR_KOPPA"										=> 0x03DE,
    "GR_SAMPI"										=> 0x03E0,
    "GR_STIGMA"										=> 0x03DA,
    "GR_YOT"										=> 0x03F3,

    "GR_ANO_TELEIA"									=> 0x0387,
    "gr_ARCHAIC_KOPPA"								=> 0x03D9,

    "GR_DASIA_OXIA"									=> 0x1FDE,
    "GR_DASIA_PERISPOMENI"							=> 0x1FDF,
    "GR_DASIA_VARIA"								=> 0x1FDD,
    "GR_DIALYTIKA_OXIA"								=> 0x1FEE,
    "GR_DIALYTIKA_PERISPOMENI"						=> 0x1FC1,
    "GR_DIALYTIKA_VARIA"							=> 0x1FED,
    "GR_OXIA"										=> 0x1FFD,
    "GR_DASIA"										=> 0x1FFE,

    "GR_DIGAMMA"									=> 0x03DC,
    "gr_DIGAMMA"									=> 0x03DD,
    "GR_PAMPHYLIAN_DIGAMMA"							=> 0x0376,
    "gr_PAMPHYLIAN_DIGAMMA"							=> 0x0377,

    "gr_REVERSED_LUNATE_SIGMA_SYMBOL"				=> 0x037B,
    "gr_DOTTED_LUNATE_SIGMA_SYMBOL"					=> 0x037C,
    "gr_REVERSED_DOTTED_LUNATE_SIGMA_SYMBOL"		=> 0x037D,

    "COMBINING_GR_PERISPOMENI"						=> 0x0342,
    "COMBINING_GR_KORONIS"							=> 0x0343,
    "COMBINING_GR_DIALYTIKA_TONOS"					=> 0x0344,
    "COMBINING_GR_YPOGEGRAMMENI"					=> 0x0345,
    "GR_HETA"										=> 0x0370,
    "gr_HETA"										=> 0x0371,
    "GR_ARCHAIC_SAMPI"								=> 0x0372,
    "gr_ARCHAIC_SAMPI"								=> 0x0373,
    "GR_NUMERAL_SIGN"								=> 0x0374,
    "GR_LOWER_NUMERAL_SIGN"							=> 0x0375,
    "GR_YPOGEGRAMMENI"								=> 0x037A,
    "GR_QUESTION_MARK"								=> 0x037E,
    "GR_TONOS"										=> 0x0384,
    "GR_DIALYTIKA_TONOS"							=> 0x0385,
    );
}



###############################################################################
# Set up a mapping from CCAT transliteration to Unicode names per above.
#     In some texts, bold words are prefixed with "$", and em dashes are
#     represented by single hyphen.
# Diacritics placed before
# (  = rough breathing   = dasia
# )  = smooth breathing  = psili
# then...
# \\ = grave accent      = varia
# /  = acute accent      = oxia and tonos
# =  = circumflex accent = Perispomeni
# 1  = iota subscript    = Ypogegrammeni
# +  = umlaut            = Dialytica      (appears *after*)
#
sub ccat {
    %ccatStrings = (
    "A"		=> "GR_ALPHA",
    "B"		=> "GR_BETA",
    "G"		=> "GR_GAMMA",
    "D"		=> "GR_DELTA",
    "E"		=> "GR_EPSILON",
    "Z"		=> "GR_ZETA",
    "H"		=> "GR_ETA",
    "Q"		=> "GR_THETA",
    "I"		=> "GR_IOTA",
    "K"		=> "GR_KAPPA",
    "L"		=> "GR_LAMDA",
    "M"		=> "GR_MU",
    "N"		=> "GR_NU",
    "C"		=> "GR_XI",
    "O"		=> "GR_OMICRON",
    "P"		=> "GR_PI",
    "R"		=> "GR_RHO",
    "S"		=> "GR_SIGMA",
    "T"		=> "GR_TAU",
    "U"		=> "GR_UPSILON",
    "F"		=> "GR_PHI",
    "X"		=> "GR_CHI",
    "Y"		=> "GR_PSI",
    "W"		=> "GR_OMEGA",

    "a"		=> "gr_ALPHA",
    "b"		=> "gr_BETA",
    "g"		=> "gr_GAMMA",
    "d"		=> "gr_DELTA",
    "e"		=> "gr_EPSILON",
    "z"		=> "gr_ZETA",
    "h"		=> "gr_ETA",
    "q"		=> "gr_THETA",
    "i"		=> "gr_IOTA",
    "k"		=> "gr_KAPPA",
    "l"		=> "gr_LAMDA",
    "m"		=> "gr_MU",
    "n"		=> "gr_NU",
    "c"		=> "gr_XI",
    "o"		=> "gr_OMICRON",
    "p"		=> "gr_PI",
    "r"		=> "gr_RHO",
    "j"		=> "gr_FINAL_SIGMA",
    "s"		=> "gr_SIGMA",
    "t"		=> "gr_TAU",
    "u"		=> "gr_UPSILON",
    "f"		=> "gr_PHI",
    "x"		=> "gr_CHI",
    "y"		=> "gr_PSI",
    "w"		=> "gr_OMEGA",

#    "(/A"	=> "GR_ALPHA_DASIA_OXIA_PROSGEGRAMMENI",
    "(/A"	=> "GR_ALPHA_DASIA_OXIA",
#    "(=A"	=> "GR_ALPHA_DASIA_PERISPOMENI_PROSGEGRAMMENI",
    "(=A"	=> "GR_ALPHA_DASIA_PERISPOMENI",
#    "(A"	=> "GR_ALPHA_DASIA_PROSGEGRAMMENI",
#    "(\\A"	=> "GR_ALPHA_DASIA_VARIA_PROSGEGRAMMENI",
    "(\\A"	=> "GR_ALPHA_DASIA_VARIA",
    "(A"	=> "GR_ALPHA_DASIA",
#    "A"	=> "GR_ALPHA_MACRON",
    "/A"	=> "GR_ALPHA_OXIA",
#    "A"	=> "GR_ALPHA_PROSGEGRAMMENI",
#    ")/A"	=> "GR_ALPHA_PSILI_OXIA_PROSGEGRAMMENI",
    ")/A"	=> "GR_ALPHA_PSILI_OXIA",
#    ")=A"	=> "GR_ALPHA_PSILI_PERISPOMENI_PROSGEGRAMMENI",
    ")=A"	=> "GR_ALPHA_PSILI_PERISPOMENI",
#    ")A"	=> "GR_ALPHA_PSILI_PROSGEGRAMMENI",
#    ")\\A"	=> "GR_ALPHA_PSILI_VARIA_PROSGEGRAMMENI",
    ")\\A"	=> "GR_ALPHA_PSILI_VARIA",
    ")A"	=> "GR_ALPHA_PSILI",
    "/A"	=> "GR_ALPHA_TONOS",
    "\\A"	=> "GR_ALPHA_VARIA",
#    "A"	=> "GR_ALPHA_VRACHY",

    "(/1a"	=> "gr_ALPHA_DASIA_OXIA_YPOGEGRAMMENI",
    "(/a"	=> "gr_ALPHA_DASIA_OXIA",
    "(=1a"	=> "gr_ALPHA_DASIA_PERISPOMENI_YPOGEGRAMMENI",
    "(=a"	=> "gr_ALPHA_DASIA_PERISPOMENI",
    "(1\\a"	=> "gr_ALPHA_DASIA_VARIA_YPOGEGRAMMENI",
    "(\\a"	=> "gr_ALPHA_DASIA_VARIA",
    "(1a"	=> "gr_ALPHA_DASIA_YPOGEGRAMMENI",
    "(a"	=> "gr_ALPHA_DASIA",
#    "a"	=> "gr_ALPHA_MACRON",
    "/1a"	=> "gr_ALPHA_OXIA_YPOGEGRAMMENI",
    "/a"	=> "gr_ALPHA_OXIA",
    "=1a"	=> "gr_ALPHA_PERISPOMENI_YPOGEGRAMMENI",
    "=a"	=> "gr_ALPHA_PERISPOMENI",
    ")/1a"	=> "gr_ALPHA_PSILI_OXIA_YPOGEGRAMMENI",
    ")/a"	=> "gr_ALPHA_PSILI_OXIA",
    ")=1a"	=> "gr_ALPHA_PSILI_PERISPOMENI_YPOGEGRAMMENI",
    ")=a"	=> "gr_ALPHA_PSILI_PERISPOMENI",
    ")1\\a"	=> "gr_ALPHA_PSILI_VARIA_YPOGEGRAMMENI",
    ")\\a"	=> "gr_ALPHA_PSILI_VARIA",
    ")1a"	=> "gr_ALPHA_PSILI_YPOGEGRAMMENI",
    ")a"	=> "gr_ALPHA_PSILI",
    "/a"	=> "gr_ALPHA_TONOS",
    "1\\a"	=> "gr_ALPHA_VARIA_YPOGEGRAMMENI",
    "\\a"	=> "gr_ALPHA_VARIA",
#    "a"	=> "gr_ALPHA_VRACHY",
    "1a"	=> "gr_ALPHA_YPOGEGRAMMENI",

    "(/E"	=> "GR_EPSILON_DASIA_OXIA",
    "(\\E"	=> "GR_EPSILON_DASIA_VARIA",
    "(E"	=> "GR_EPSILON_DASIA",
    "/E"	=> "GR_EPSILON_OXIA",
    ")/E"	=> "GR_EPSILON_PSILI_OXIA",
    ")\\E"	=> "GR_EPSILON_PSILI_VARIA",
    ")E"	=> "GR_EPSILON_PSILI",
    "/E"	=> "GR_EPSILON_TONOS",
    "\\E"	=> "GR_EPSILON_VARIA",

    "(/e"	=> "gr_EPSILON_DASIA_OXIA",
    "(\\e"	=> "gr_EPSILON_DASIA_VARIA",
    "(e"	=> "gr_EPSILON_DASIA",
    "/e"	=> "gr_EPSILON_OXIA",
    ")/e"	=> "gr_EPSILON_PSILI_OXIA",
    ")\\e"	=> "gr_EPSILON_PSILI_VARIA",
    ")e"	=> "gr_EPSILON_PSILI",
    "/e"	=> "gr_EPSILON_TONOS",
    "\\e"	=> "gr_EPSILON_VARIA",

#    "(/H"	=> "GR_ETA_DASIA_OXIA_PROSGEGRAMMENI",
    "(/H"	=> "GR_ETA_DASIA_OXIA",
#    "(=H"	=> "GR_ETA_DASIA_PERISPOMENI_PROSGEGRAMMENI",
    "(=H"	=> "GR_ETA_DASIA_PERISPOMENI",
#    "(H"	=> "GR_ETA_DASIA_PROSGEGRAMMENI",
#    "(\\H"	=> "GR_ETA_DASIA_VARIA_PROSGEGRAMMENI",
    "(\\H"	=> "GR_ETA_DASIA_VARIA",
    "(H"	=> "GR_ETA_DASIA",
    "/H"	=> "GR_ETA_OXIA",
#    "H"	=> "GR_ETA_PROSGEGRAMMENI",
#    ")/H"	=> "GR_ETA_PSILI_OXIA_PROSGEGRAMMENI",
    ")/H"	=> "GR_ETA_PSILI_OXIA",
#    ")=H"	=> "GR_ETA_PSILI_PERISPOMENI_PROSGEGRAMMENI",
    ")=H"	=> "GR_ETA_PSILI_PERISPOMENI",
#    ")H"	=> "GR_ETA_PSILI_PROSGEGRAMMENI",
#    ")\\H"	=> "GR_ETA_PSILI_VARIA_PROSGEGRAMMENI",
    ")\\H"	=> "GR_ETA_PSILI_VARIA",
    ")H"	=> "GR_ETA_PSILI",
    "/H"	=> "GR_ETA_TONOS",
    "\\H"	=> "GR_ETA_VARIA",

    "(/1h"	=> "gr_ETA_DASIA_OXIA_YPOGEGRAMMENI",
    "(/h"	=> "gr_ETA_DASIA_OXIA",
    "(=1h"	=> "gr_ETA_DASIA_PERISPOMENI_YPOGEGRAMMENI",
    "(=h"	=> "gr_ETA_DASIA_PERISPOMENI",
    "(1\\h"	=> "gr_ETA_DASIA_VARIA_YPOGEGRAMMENI",
    "(\\h"	=> "gr_ETA_DASIA_VARIA",
    "(1h"	=> "gr_ETA_DASIA_YPOGEGRAMMENI",
    "(h"	=> "gr_ETA_DASIA",
    "/1h"	=> "gr_ETA_OXIA_YPOGEGRAMMENI",
    "/h"	=> "gr_ETA_OXIA",
    "=1h"	=> "gr_ETA_PERISPOMENI_YPOGEGRAMMENI",
    "=h"	=> "gr_ETA_PERISPOMENI",
    ")/1h"	=> "gr_ETA_PSILI_OXIA_YPOGEGRAMMENI",
    ")/h"	=> "gr_ETA_PSILI_OXIA",
    ")=1h"	=> "gr_ETA_PSILI_PERISPOMENI_YPOGEGRAMMENI",
    ")=h"	=> "gr_ETA_PSILI_PERISPOMENI",
    ")1\\h"	=> "gr_ETA_PSILI_VARIA_YPOGEGRAMMENI",
    ")\\h"	=> "gr_ETA_PSILI_VARIA",
    ")1h"	=> "gr_ETA_PSILI_YPOGEGRAMMENI",
    ")h"	=> "gr_ETA_PSILI",
    "/h"	=> "gr_ETA_TONOS",
    "1\\h"	=> "gr_ETA_VARIA_YPOGEGRAMMENI",
    "\\h"	=> "gr_ETA_VARIA",
    "1h"	=> "gr_ETA_YPOGEGRAMMENI",

    "(/I"	=> "GR_IOTA_DASIA_OXIA",
    "(=I"	=> "GR_IOTA_DASIA_PERISPOMENI",
    "(\\I"	=> "GR_IOTA_DASIA_VARIA",
    "(I"	=> "GR_IOTA_DASIA",
    "I+"	=> "GR_IOTA_DIALYTIKA",
#    "I"	=> "GR_IOTA_MACRON",
    "/I"	=> "GR_IOTA_OXIA",
    ")/I"	=> "GR_IOTA_PSILI_OXIA",
    ")=I"	=> "GR_IOTA_PSILI_PERISPOMENI",
    ")\\I"	=> "GR_IOTA_PSILI_VARIA",
    ")I"	=> "GR_IOTA_PSILI",
    "/I"	=> "GR_IOTA_TONOS",
    "\\I"	=> "GR_IOTA_VARIA",
#    "I"	=> "GR_IOTA_VRACHY",

    "(/i"	=> "gr_IOTA_DASIA_OXIA",
    "(=i"	=> "gr_IOTA_DASIA_PERISPOMENI",
    "(\\i"	=> "gr_IOTA_DASIA_VARIA",
    "(i"	=> "gr_IOTA_DASIA",
    "/i+"	=> "gr_IOTA_DIALYTIKA_OXIA",
    "=i+"	=> "gr_IOTA_DIALYTIKA_PERISPOMENI",
    "/i+"	=> "gr_IOTA_DIALYTIKA_TONOS",
    "\\i+"	=> "gr_IOTA_DIALYTIKA_VARIA",
    "i+"	=> "gr_IOTA_DIALYTIKA",
#    "i"	=> "gr_IOTA_MACRON",
    "/i"	=> "gr_IOTA_OXIA",
    "=i"	=> "gr_IOTA_PERISPOMENI",
    ")/i"	=> "gr_IOTA_PSILI_OXIA",
    ")=i"	=> "gr_IOTA_PSILI_PERISPOMENI",
    ")\\i"	=> "gr_IOTA_PSILI_VARIA",
    ")i"	=> "gr_IOTA_PSILI",
    "/i"	=> "gr_IOTA_TONOS",
    "\\i"	=> "gr_IOTA_VARIA",
#    "i"	=> "gr_IOTA_VRACHY",

    "(/O"	=> "GR_OMICRON_DASIA_OXIA",
    "(\\O"	=> "GR_OMICRON_DASIA_VARIA",
    "(O"	=> "GR_OMICRON_DASIA",
    "/O"	=> "GR_OMICRON_OXIA",
    ")/O"	=> "GR_OMICRON_PSILI_OXIA",
    ")\\O"	=> "GR_OMICRON_PSILI_VARIA",
    ")O"	=> "GR_OMICRON_PSILI",
    "/O"	=> "GR_OMICRON_TONOS",
    "\\O"	=> "GR_OMICRON_VARIA",

    "(/o"	=> "gr_OMICRON_DASIA_OXIA",
    "(\\o"	=> "gr_OMICRON_DASIA_VARIA",
    "(o"	=> "gr_OMICRON_DASIA",
    "/o"	=> "gr_OMICRON_OXIA",
    ")/o"	=> "gr_OMICRON_PSILI_OXIA",
    ")\\o"	=> "gr_OMICRON_PSILI_VARIA",
    ")o"	=> "gr_OMICRON_PSILI",
    "/o"	=> "gr_OMICRON_TONOS",
    "\\o"	=> "gr_OMICRON_VARIA",

    "(r"	=> "gr_RHO_DASIA",
    "(R"	=> "GR_RHO_DASIA",
    ")r"	=> "gr_RHO_PSILI",

#    "U"		=> "GR_UPSILON_ACUTE_HOOK",
    "(/U"	=> "GR_UPSILON_DASIA_OXIA",
    "(=U"	=> "GR_UPSILON_DASIA_PERISPOMENI",
    "(\\U"	=> "GR_UPSILON_DASIA_VARIA",
    "(U"	=> "GR_UPSILON_DASIA",
#    "U"	=> "GR_UPSILON_DIAERESIS_HOOK",
    "U+"	=> "GR_UPSILON_DIALYTIKA",
#    "U"	=> "GR_UPSILON_HOOK",
#    "U"	=> "GR_UPSILON_MACRON",
    "/U"	=> "GR_UPSILON_OXIA",
    "/U"	=> "GR_UPSILON_TONOS",
    "\\U"	=> "GR_UPSILON_VARIA",
#    "U"	=> "GR_UPSILON_VRACHY",

    "(/u"	=> "gr_UPSILON_DASIA_OXIA",
    "(=u"	=> "gr_UPSILON_DASIA_PERISPOMENI",
    "(\\u"	=> "gr_UPSILON_DASIA_VARIA",
    "(u"	=> "gr_UPSILON_DASIA",
    "/u+"	=> "gr_UPSILON_DIALYTIKA_OXIA",
    "=u+"	=> "gr_UPSILON_DIALYTIKA_PERISPOMENI",
    "/u+"	=> "gr_UPSILON_DIALYTIKA_TONOS",
    "\\u+"	=> "gr_UPSILON_DIALYTIKA_VARIA",
    "u+"	=> "gr_UPSILON_DIALYTIKA",
#    "u"	=> "gr_UPSILON_MACRON",
    "/u"	=> "gr_UPSILON_OXIA",
    "=u"	=> "gr_UPSILON_PERISPOMENI",
    ")/u"	=> "gr_UPSILON_PSILI_OXIA",
    ")=u"	=> "gr_UPSILON_PSILI_PERISPOMENI",
    ")\\u"	=> "gr_UPSILON_PSILI_VARIA",
    ")u"	=> "gr_UPSILON_PSILI",
    "/u"	=> "gr_UPSILON_TONOS",
    "\\u"	=> "gr_UPSILON_VARIA",
#    "u"	=> "gr_UPSILON_VRACHY",

#    "(/W"	=> "GR_OMEGA_DASIA_OXIA_PROSGEGRAMMENI",
    "(/W"	=> "GR_OMEGA_DASIA_OXIA",
#    "(=W"	=> "GR_OMEGA_DASIA_PERISPOMENI_PROSGEGRAMMENI",
    "(=W"	=> "GR_OMEGA_DASIA_PERISPOMENI",
#    "(W"	=> "GR_OMEGA_DASIA_PROSGEGRAMMENI",
#    "(\\W"	=> "GR_OMEGA_DASIA_VARIA_PROSGEGRAMMENI",
    "(\\W"	=> "GR_OMEGA_DASIA_VARIA",
    "(W"	=> "GR_OMEGA_DASIA",
    "/W"	=> "GR_OMEGA_OXIA",
#    "W"	=> "GR_OMEGA_PROSGEGRAMMENI",
#    ")/W"	=> "GR_OMEGA_PSILI_OXIA_PROSGEGRAMMENI",
    ")/W"	=> "GR_OMEGA_PSILI_OXIA",
#    ")=W"	=> "GR_OMEGA_PSILI_PERISPOMENI_PROSGEGRAMMENI",
    ")=W"	=> "GR_OMEGA_PSILI_PERISPOMENI",
#    ")W"	=> "GR_OMEGA_PSILI_PROSGEGRAMMENI",
#    ")\\W"	=> "GR_OMEGA_PSILI_VARIA_PROSGEGRAMMENI",
    ")\\W"	=> "GR_OMEGA_PSILI_VARIA",
    ")W"	=> "GR_OMEGA_PSILI",
    "/W"	=> "GR_OMEGA_TONOS",
    "\\W"	=> "GR_OMEGA_VARIA",

    "(/1w"	=> "gr_OMEGA_DASIA_OXIA_YPOGEGRAMMENI",
    "(/w"	=> "gr_OMEGA_DASIA_OXIA",
    "(=1w"	=> "gr_OMEGA_DASIA_PERISPOMENI_YPOGEGRAMMENI",
    "(=w"	=> "gr_OMEGA_DASIA_PERISPOMENI",
    "(1\\w"	=> "gr_OMEGA_DASIA_VARIA_YPOGEGRAMMENI",
    "(\\w"	=> "gr_OMEGA_DASIA_VARIA",
    "(1w"	=> "gr_OMEGA_DASIA_YPOGEGRAMMENI",
    "(w"	=> "gr_OMEGA_DASIA",
    "/1w"	=> "gr_OMEGA_OXIA_YPOGEGRAMMENI",
    "/w"	=> "gr_OMEGA_OXIA",
    "=1w"	=> "gr_OMEGA_PERISPOMENI_YPOGEGRAMMENI",
    "=w"	=> "gr_OMEGA_PERISPOMENI",
    ")/1w"	=> "gr_OMEGA_PSILI_OXIA_YPOGEGRAMMENI",
    ")/w"	=> "gr_OMEGA_PSILI_OXIA",
    ")=1w"	=> "gr_OMEGA_PSILI_PERISPOMENI_YPOGEGRAMMENI",
    ")=w"	=> "gr_OMEGA_PSILI_PERISPOMENI",
    ")1\\w"	=> "gr_OMEGA_PSILI_VARIA_YPOGEGRAMMENI",
    ")\\w"	=> "gr_OMEGA_PSILI_VARIA",
    ")1w"	=> "gr_OMEGA_PSILI_YPOGEGRAMMENI",
    ")w"	=> "gr_OMEGA_PSILI",
    "/w"	=> "gr_OMEGA_TONOS",
    "1\\w"	=> "gr_OMEGA_VARIA_YPOGEGRAMMENI",
    "\\w"	=> "gr_OMEGA_VARIA",
    "1w"	=> "gr_OMEGA_YPOGEGRAMMENI",

    # Might want to comment out the following, so if there are errors above
    # we'll get no change instead of a standalone accent.
	#
    "="		=> "GR_PERISPOMENI",
#   ""		=> "GR_PROSGEGRAMMENI",
    ")/"	=> "GR_PSILI_OXIA",
    ")="	=> "GR_PSILI_PERISPOMENI",
    ")\\"	=> "GR_PSILI_VARIA",
    ")"		=> "GR_PSILI",

    "(/"	=> "GR_DASIA_OXIA",
    "(="	=> "GR_DASIA_PERISPOMENI",
    "(\\"	=> "GR_DASIA_VARIA",
    "/+"	=> "GR_DIALYTIKA_OXIA",
    "=+"	=> "GR_DIALYTIKA_PERISPOMENI",
    "\\+"	=> "GR_DIALYTIKA_VARIA",
    "/"		=> "GR_OXIA",
    "("		=> "GR_DASIA",

    "/"		=> "GR_TONOS",
    "/+"	=> "GR_DIALYTIKA_TONOS"
    );
}



###############################################################################
###############################################################################
###############################################################################

=pod

head1 Usage

transliterate [options] file

Convert transliterations to Unicode. Presently handles the Betacode or
CCAT markup (?) in some texts I have. Others can be added.


=head1 Options

(prefix 'no' to negate where applicable):

=over

=item * B<--cccatgreek>

From CCAT

=item * B<--entities>

Write out XML entity references for chars >127.

=item * B<--entLength n>

Minimum digits to write out for XML entity refs.

=item * B<--lineends t>

Assume Unix, Dos, or Mac line-breaks for input.

=item * B<--markup>

Put in chapter/verse markup (implies -verses).

=item * B<--outlineends t>

Write Unix, Dos, or Mac line-breaks for output.

=item * B<--prefix 's'>

Put before IDs with -markup.

=item * B<--quiet> OR B<-q>
Suppress most messages.

=item * B<--unicode>

Assume input is utf-8.

=item * B<--verbose> OR B<-v>
Add more messages (repeatable).

=item * B<--verses>

Don't mess with first field of line (verse id, etc.).
WATCH OUT due to '1' as CCAT iota-subscript!
Can't do other verse markup yet.

=item * B<--version>

Show version/license info and exit.

=back



=head1 Known Bugs/Limitations

(please report any other bugs to the author):

    Won't work if the output string for given characters is the same as
    another string to be converted (doesn't happen for current case). If
    needed, this would require iterating across the string instead of doing
    global regex changes. -stable will eventually fix this.
    Should have an option to ignore XML markup.
    Should have a way to load an external file to replace/modify translation.



=head1 Related commands

C<iconv> -- all kinds of character-set translations.



=head1 Ownership

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=cut
